//Это компонент для Shop.js
//По аналогии с TypeBar начнем с того, что обернем всю функцию в observer и  добавим глабальное хранилище из Context
//Обернем наш компонент в функцию observer() - чтобы елемент, в зависимости от действий юзера, перерендривался в режиме реального времени (чтобы mobx мог отслеживать изменения значений состояний и при их изменении автоматически обновлять контент страницы)
//Меняем встроеный div на Row и пробегаемся по brands из нашего хранилища при помощи .map(), отрендривая названия каждого из брендов в <Card> (вызываем метод get brands() из deviceStore)
//И опять же, поскольку мы итерируемся по списку - не забываем указывать ключи для наших брендов "key={type.id}"
//Делаем внутрение отступы 'p-3'
//!!!P.S. Тот же баг, что и в Auth.js: Почему-то в новой версии bootstrap, при использовании Row у нас ничего не выравнивается. Но когда я заменил бутстраповский Row на обычный <div> - все заработало и выравнялось

//Для того чтобы сделать отображенные бренды товаров кликабельными, добавим в добавления в deviceStore логику setSelectedBrand
//После добавления в deviceStore логики setSelectedBrand, теперь привяжем ее к текущему файлу. Мы будем вызывать setSelectedBrand при нажатии на конкретный тип товара
//И чтобы тип товара на который мы нажимаем как-то визуально отличался, создадим пропс active = {brand.id === device.selectedBrand.id}
//Когда active === true, то елемент/елементы в ListGroup.Item будут подсвечиваться каким либо цветом
//В итоге, при нажатии на любой бренд товара, мы дублируем его в setSelectedBrand. После чего, если .id добавленного/сохраненного при нажатии кнопки бренда товара === .id изначально существующего бренда, то он будет подсвечен отдельным цветом
//А также, чтобы было понятно что наши елементы кликабельны - при наведении на елемент, курсор будет менятся на поинтер style={{cursor: "pointer"}}
//!!!P.S. Все то что говорилось в туториале - не работает! В этом примере мы не должны использовать ListGroup (только Card). Но кнопки при нажатии подсвечиваются только с ним. При чем ListGroup криво отображается и изменить это нельзя
//!!!P.S. Решил оставить кривой ListGroup только из-за подсветки кнопки. Хотя вместо подстветки должна была бы подсвечиваться только рамка кнопки. Но я выбрал посдсветку кнопки (active) вместо рамки (border), потому что комада border не работает
//!!!P.S.S В итоге получилось решить все при помощи <CardGroup> и <Card>. Оказывается для <Card> работает команда комада border, но не работает active, поэтому и натыкался на ошибки. Но хоть border заработал, но рамка отображается квадратной и криво
//!!!!!P.S.S.S Нашел решение в коментах на YouTube - заменяем CardGroup/Row на Form. И теперь все работает и отображается тоже красиво
//В итоге, подсведку всей кнопки заменил на подсветку только ее рамки: {brand.id === device.selectedBrand.id ? "primary" : "light"}. При нажатии на бренд активируется цвет "primary", пока все остальные остаются по умолчанию "light"

import React, { useContext } from 'react'
import {Context} from '../index'
import { observer } from 'mobx-react-lite'
import { Card, Form } from 'react-bootstrap'

const BrandBar = observer(() => {
    const {device} = useContext(Context)

    return (
        
        <Form className='d-flex'>
            {device.brands.map(brand => //brand от сюда
                <Card
                    style={{cursor: 'pointer', width: '18rem'}}                    
                    border = {brand.id === device.selectedBrand.id ? "primary" : "light"}
                    onClick={() => device.setSelectedBrand(brand)} //brand передаем сюда
                    key={brand.id}
                    className="p-3"                    
                >
                    {brand.name}
                </Card>    
            )}
        </Form>          
               
    )
})

export default BrandBar